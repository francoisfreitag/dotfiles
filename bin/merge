#!/usr/bin/env python3
import argparse
import json
import subprocess
import sys
import urllib.parse


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("pr_number", nargs="?")
    return parser.parse_args()


def current_pr_number():
    result = subprocess.run(
        ["hub", "pr", "show", "--format=%I"],
        capture_output=True,
        check=True,
    )
    return result.stdout.decode().strip()


def show_confirm(pr_number):
    result = subprocess.run(
        [
            "hub",
            "pr",
            "show",
            pr_number,
            "--format=Merge “%t” to \033[1m%B\033[0m? [y/n]%Creset",
        ],
        capture_output=True,
        check=True,
    )
    text = result.stdout.decode().strip()
    answer = ""
    while not answer or answer[0] not in "yn":
        answer = input(text).lower()
    return answer == "y"


def repo_info():
    result = subprocess.run(
        ["git", "remote", "get-url", "upstream"],
        capture_output=True,
        check=True,
    )
    url = result.stdout.decode().strip()
    if url.startswith("git@"):
        if url.endswith(".git"):
            url = url[:-4]
        _domain, path = url.split(":", maxsplit=1)
    else:
        parsed = urllib.parse.urlparse(url)
        path = parsed.path.lstrip("/")
    owner, repo = path.split("/", maxsplit=1)
    return owner, repo


def default_branch(owner, repo):
    result = subprocess.run(
        ["hub", "api", f"repos/{owner}/{repo}"], capture_output=True, check=True
    )
    repo_details = json.loads(result.stdout)
    return repo_details["default_branch"]


def pr_branch(pr_number):
    result = subprocess.run(
        ["hub", "pr", "show", pr_number, "--format=%H"],
        capture_output=True,
        check=True,
    )
    head = result.stdout.decode().strip()
    _fork, head_branch = head.split(":", maxsplit=1)
    return head_branch


def main():
    options = parse_args()
    if not options.pr_number:
        options.pr_number = current_pr_number()
    owner, repo = repo_info()
    confirm = show_confirm(options.pr_number)
    if not confirm:
        return 1
    subprocess.run(
        [
            "hub",
            "api",
            "--method",
            "POST",
            f"/repos/{owner}/{repo}/issues/{options.pr_number}/comments",
            "--field",
            "body=bors r+",
        ],
        stdout=subprocess.DEVNULL,
        check=True,
    )

    branch = pr_branch(options.pr_number)
    try:
        subprocess.run(
            ["git", "show", branch, "--"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            check=True,
        )
    except subprocess.CalledProcessError:
        print(f"Could not find branch {branch} locally.", file=sys.stderr)
    else:
        subprocess.run(
            [
                "git",
                "show",
                "--no-patch",
                "--format=Branch HEAD was %H",
                branch,
            ],
            check=True,
        )
        result = subprocess.run(
            ["git", "branch", "--show-current"], check=True, capture_output=True
        )
        current_branch = result.stdout.decode().strip()
        if current_branch == branch:
            subprocess.run(
                ["git", "switch", "--quiet", default_branch(owner, repo)], check=True
            )
        subprocess.run(["git", "branch", "--delete", "--force", branch], check=True)
    return 0


if __name__ == "__main__":
    sys.exit(main())
