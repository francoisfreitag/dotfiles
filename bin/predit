#!/usr/bin/env python3
import os
import subprocess
import sys
import tempfile
import urllib.parse


def current_pr_as_commit_message():
    result = subprocess.run(
        ["hub", "pr", "show", "--format", "%t%n%n%b"],
        stdout=subprocess.PIPE,
        check=True,
    )
    return result.stdout.decode().replace("\r\n", "\n").rstrip("\n")


def pr_update_path():
    result = subprocess.run(
        ["hub", "pr", "show", "--format", "%U"], capture_output=True
    )
    pr_url = result.stdout.decode().rstrip("\n")
    path = urllib.parse.urlparse(pr_url).path
    owner, repo, _pull, pr_number = path.lstrip("/").split("/")
    return f"repos/{owner}/{repo}/pulls/{pr_number}"


def main():
    content = current_pr_as_commit_message()
    editor = os.getenv("EDITOR", "vi")
    try:
        with tempfile.NamedTemporaryFile(
            prefix="EDIT_PR_MSG_", mode="w", delete=False
        ) as tmp:
            tmp.write(content)

        subprocess.run([editor, tmp.name], text=True)

        with open(tmp.name, "r") as f:
            new_content = f.read().rstrip("\n")
        if not new_content.strip() or new_content == content:
            sys.exit("Empty commit message or commit message not edited.")
    finally:
        os.unlink(tmp.name)

    # Update PR description with new data.
    title_end = new_content.index("\n")
    title = new_content[:title_end]
    # Ignore separators.
    body = new_content[title_end + 2 :]

    subprocess.run(
        [
            "hub",
            "api",
            "--method",
            "PATCH",
            pr_update_path(),
            "--field",
            f"title={title}",
            "--field",
            f"body={body}",
        ],
        stdout=subprocess.DEVNULL,
    )


if __name__ == "__main__":
    main()
